@page
@model MallMedia.Presentation.Pages.Admin.Schedule.CreateModel
@{
    ViewData["Title"] = "Create Schedule";
}
<div class="container mt-5">
    <h2>Create Schedule</h2>
    <form id="filterForm" method="post" enctype="multipart/form-data">
        <div class="row ">
            <!-- Start Date -->
            <div class="form-group pt-3 col-md-6">
                <label for="startDate">Start Date</label>
                <input type="date" id="startDate" asp-for="schedule.StartDate" class="form-control" />
                <span asp-validation-for="schedule.StartDate" class="text-danger"></span>
            </div>


            <!-- End Date -->
            <div class="form-group pt-3 col-md-6">
                <label for="endDate">End Date</label>
                <input type="date" id="endDate" class="form-control" asp-for="schedule.EndDate" />
                <span asp-validation-for="schedule.EndDate" class="text-danger"></span>
            </div>
        </div>

        <div class="row ">
            <!-- Content Dropdown -->
            <div class="form-group pt-3  col-md-6">
                <label for="contentId">Content</label>
                <select id="contentId" class="form-control" asp-for="schedule.ContentId">
                    <option value="">Select Content</option>
                    @foreach (var content in Model.Content)
                    {
                        <option value="@content.Id">[@content.ContentType] - [@content.Category.Name] - @content.Title</option>
                    }
                </select>
                <span asp-validation-for="schedule.ContentId" class="text-danger"></span>
            </div>

            <!-- Time Frames Type Dropdown -->
            <div class="form-group pt-3  col-md-6">
                <label for="timeFramId">Time-frames</label>
                <select id="timeFramId" class="form-control" asp-for="schedule.TimeFrameId">
                    <option value="">Select Time-frame</option>
                    @foreach (var time in Model.TimeFrames)
                    {
                        <option value="@time.Id">@time.StartTime - @time.EndTime</option>
                    }
                </select>
                <span asp-validation-for="schedule.TimeFrameId" class="text-danger"></span>
            </div>
        </div>

        <!-- Devices Dropdown (Auto-populated) -->
        <div class="form-group pt-3">
            <label for="deviceSelect">Devices:</label>
            <select id="deviceSelect" class="form-control" asp-for="schedule.DeviceId">
                <option value="">Select a device</option> <!-- Default placeholder option -->
            </select>
            <span asp-validation-for="schedule.DeviceId" class="text-danger"></span>
        </div>

        <!-- Submit Button -->
        <a asp-page="/Admin/Schedule/Index" class="btn btn-danger mt-3">Back</a>
        <button type="submit" class="btn btn-primary mt-3">Create</button>
    </form>
</div>


<!-- Add this line in the <head> section or before the closing </body> tag -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        funcuitog
        
        // Lắng nghe sự thay đổi checkbox loại thiết bị
        $('input[type="checkbox"]').on('change', function () {
            var selectedDeviceTypes = [];
            $('input[type="checkbox"]:checked').each(function () {
                selectedDeviceTypes.push($(this).val());
            });

            // Gửi yêu cầu đến API khi có ít nhất một loại thiết bị được chọn
            if (selectedDeviceTypes.length > 0) {
                $.ajax({
                    url: 'https://localhost:7199/api/floor-department',  // Endpoint API của bạn
                    type: 'POST',  // Đổi từ GET sang POST
                    contentType: 'application/json',  // Đảm bảo gửi dưới dạng JSON
                    data: JSON.stringify({ deviceType: selectedDeviceTypes }),  // Gửi mảng deviceTypes
                    success: function (response) {

                        $('#labelSelectFloor').css('display', 'block');

                        // Cập nhật checkbox cho Floor
                        var floorCheckboxes = $('#floorCheckboxes');
                        floorCheckboxes.empty();  // Clear current checkboxes
                        response.floors.forEach(function (floor) {
                            floorCheckboxes.append('<div class="form-check">' +
                                '<input class="form-check-input" type="checkbox" value="' + floor.floor + '" id="floor-' + floor.floor + '">' +
                                '<label class="form-check-label" for="floor-' + floor.floor + '">' + floor.deviceType + ' floor : ' + floor.floor + '</label>' +
                                '</div>');
                        });
                        $('#labelSelectDepartment').css('display', 'block');
                        // Cập nhật checkbox cho Department
                        var departmentCheckboxes = $('#departmentCheckboxes');
                        departmentCheckboxes.empty();  // Clear current checkboxes
                        response.departments.forEach(function (department) {
                            departmentCheckboxes.append('<div class="form-check">' +
                                '<input class="form-check-input" type="checkbox" value="' + department.department + '" id="department-' + department.department + '">' +
                                '<label class="form-check-label" for="department-' + department.department + '">' + department.deviceType + ' department: ' + department.department + '</label>' +
                                '</div>');
                        });
                        console.log(selectedDeviceTypes);
                        console.log(response);
                    },
                    error: function (xhr, status, error) {
                        alert('Error fetching floor and department data.');
                    }
                });
            }
        });

        $('#floorCheckboxes').on('change', 'input[type="checkbox"]', function () {
            var selectedFloors = [];
            $('#floorCheckboxes input[type="checkbox"]:checked').each(function () {
                selectedFloors.push($(this).val());  // Lấy giá trị của các checkbox đã chọn
            });

            // Nếu có ít nhất một Floor được chọn thì disable department checkboxes
            if (selectedFloors.length > 0) {
                $('#departmentCheckboxes input[type="checkbox"]').prop('disabled', true);
            } else {
                // Nếu không có Floor nào được chọn, enable lại department checkboxes
                $('#departmentCheckboxes input[type="checkbox"]').prop('disabled', false);
            }
        });

        // Lắng nghe sự thay đổi của các checkbox Department (khi Floor chưa được chọn)
        $('#departmentCheckboxes').on('change', 'input[type="checkbox"]', function () {
            var selectedDepartments = [];
            $('#departmentCheckboxes input[type="checkbox"]:checked').each(function () {
                selectedDepartments.push($(this).val());  // Lấy giá trị của các checkbox đã chọn
            });

            // Nếu có ít nhất một Department được chọn thì disable floor checkboxes
            if (selectedDepartments.length > 0) {
                $('#floorCheckboxes input[type="checkbox"]').prop('disabled', true);
            } else {
                // Nếu không có Department nào được chọn, enable lại floor checkboxes
                $('#floorCheckboxes input[type="checkbox"]').prop('disabled', false);
            }
        });

        // Xử lý sự kiện submit form
        $('#filterForm').submit(function (e) {
            e.preventDefault(); // Ngăn chặn form gửi đi

            // Lấy thông tin các lựa chọn
            var selectedDeviceTypes = [];
            $('#deviceTypeCheckBox input[type="checkbox"]:checked').each(function () {
                selectedDeviceTypes.push($(this).val());
            });

            var selectedFloors = [];
            $('#floorCheckboxes input[type="checkbox"]:checked').each(function () {
                selectedFloors.push($(this).val());
            });

            var selectedDepartments = [];
            $('#departmentCheckboxes input[type="checkbox"]:checked').each(function () {
                selectedDepartments.push($(this).val());
            });

            // Lấy thông tin ngày bắt đầu, kết thúc và content
            var startDate = $('#startDate').val();
            var endDate = $('#endDate').val();
            var contentId = $('#contentId').val();
            var timeFramId = $('#timeFramId').val();

            // Check if all fields are filled before making the request
            if (startDate && endDate && contentId && timeFramId) {
                // Prepare the query parameters
                var queryParams = {
                    StartDate: startDate,
                    EndDate: endDate,
                    ContentId: contentId,
                    TimeFramId: timeFramId
                };

                // Make an AJAX GET request to fetch devices
                $.ajax({
                    url: 'http://10.20.54.244:5056/api/Schedule/matchingdevices', // API endpoint to fetch matching devices
                    type: 'GET',
                    data: queryParams,
                    success: function (response) {
                        // Clear the device dropdown
                        $('#deviceSelect').empty().append('<option value="">Select a device</option>');

                        // Loop through the response and populate the device dropdown
                        if (response.length > 0) {
                            $.each(response, function (index, device) {
                                $('#deviceSelect').append('<option value="' + device.id + '">' + device.deviceName + '</option>');
                            });
                        } else {
                            $('#deviceSelect').append('<option value="">No devices found</option>');
                        }
                    },
                    error: function (error) {
                        console.log('Error fetching devices:', error);
                    }
                });
            }
        }

        // Attach change event listeners to the input fields
        $('#startDate, #endDate, #contentId, #timeFramId').on('change', function () {
            fetchDevices();  // Call fetchDevices on any change
        });
    });
</script>


