@page
@model MallMedia.Presentation.Pages.Admin.Content.CreateModel
@if (Model == null || Model.CurrentUser == null)
{
    <div class="alert alert-danger">
        Error: Model or CurrentUser is null.
    </div>
}
@{
    ViewData["Title"] = "Create Content";
}
<head>
    <!-- Thêm type="module" vào script để hỗ trợ import/export -->
    <script type="module" defer>
        import { checkUserAuthentication } from '/js/auth.js';  // Đảm bảo đường dẫn đúng

        window.onload = async function () {
            try {
                // Gọi hàm checkUserAuthentication và lấy thông tin currentUser
                const currentUser = await checkUserAuthentication("Admin");
            } catch (error) {
                console.error('Lỗi khi xác thực:', error);
            }
        };
    </script>
</head>
<div class="container mt-5">
    <h2>Create Content</h2>
    <form id="contentForm" enctype="multipart/form-data">
        <div class="row">
            <!-- Title Input -->
            <div class="form-group pt-3 col-6">
                <label for="title">Title</label>
                <input required type="text" id="title" asp-for="Content.Title" class="form-control" />
                <span asp-validation-for="Content.Title" class="text-danger"></span>
                <div id="titleError" class="text-danger error"></div>
            </div>
            <!-- Category Dropdown -->
            <div class="form-group pt-3 col-6">
                <label for="category">Category</label>
                <select required id="categoryDropdown" asp-for="Content.CategoryId" class="form-control">
                    <option value="">Select Category</option>
                    @foreach (var category in Model.Categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </select>
                <span asp-validation-for="Content.CategoryId" class="text-danger"></span>
                <div id="categoryError" class="text-danger error"></div>
            </div>

            <!-- Description Input -->
            <div class="form-group pt-3">
                <label for="description">Description</label>
                <textarea required id="description" asp-for="Content.Description" rows="4" class="form-control"></textarea>
                <span asp-validation-for="Content.Description" class="text-danger"></span>
                <div id="descriptionError" class="text-danger error"></div>
            </div>


            <!-- Video Content Upload -->
            <div id="videoContent" class="form-group pt-3 col-6">
                <label for="videoInput">Video Content</label>
                <input required type="file" id="videoInput" class="form-control" multiple accept="video/mp4" />
                <span id="videoError" class="text-danger error"></span>
            </div>

            <!-- Created By Field -->
            <div class="form-group col-6 pt-3">
                <label for="currentUser">Created By</label>
                <input type="text" id="userId" asp-for="Content.UserId" readonly hidden value="4395b053-a38e-46d7-afd1-065cbb5fce15" class="form-control" />
                <input type="text" id="username" value="Admin" readonly class="form-control" />
                <div id="userIdError" class="text-danger error"></div>
            </div>

        </div>

        <!-- Submit Button -->
        <button type="button" class="btn btn-primary mt-4" id="submitBtn">Create Content</button>
    </form>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js"></script>
    <script>
        const UrlBase = "https://localhost:7199";  // Ensure this matches your API base URL
        const authToken = localStorage.getItem('authToken');
        const tolerance = 0.01;

        // Helper function to check if value is a multiple of resolution by a specific factor
        function isMultipleOf(value, resolution, factor) {
            const ratio = value / resolution;
            return Math.abs(ratio - factor) < tolerance; // Check if the ratio is close to the desired factor
        }

        // Helper function to check if value is an integer multiple of resolution
        function isIntegerMultiple(value, resolution) {
            const ratio = value / resolution;
            return Math.abs(ratio - Math.round(ratio)) < tolerance; // Check if the ratio is close to an integer
        }

        document.addEventListener('DOMContentLoaded', async function () {
            const categoryDropdown = new Choices('#categoryDropdown', {
                searchEnabled: true,
                itemSelectText: '',
                placeholder: true,
                placeholderValue: 'Select Category',
            });

            try {
                // Fetch current user data
                const currentUserEndpoint = UrlBase + "/api/identity/currentUser";
               const response = await fetch(currentUserEndpoint, {
    method: 'GET',
    headers: {
        'Authorization': `Bearer ${authToken}` 
    }
});
                if (!response.ok) {
                    throw new Error('Failed to fetch current user');
                }

                const currentUser = await response.json();

                // Assuming the API response has a `userId` field
                const userIdInput = document.getElementById('userId');
                const usernameInput = document.getElementById('username');
                if (userIdInput && currentUser && currentUser.id) {
                    userIdInput.value = currentUser.id;
                    usernameInput.value = currentUser.username;
                }
            } catch (error) {
                console.error('Error fetching user data:', error);
                // Optionally, handle error (e.g., display a message to the user)
            }
        });

        const chunkSize = 1024 * 1024;
        const uploadEndpoint = UrlBase + '/api/content/upload-media';
        const createContentEndpoint = UrlBase + '/api/content';
        const form = document.getElementById('contentForm');
        const submitBtn = document.getElementById('submitBtn');
        const videoInput = document.getElementById('videoInput');
        const videoValidationMessage = document.getElementById('videoError');

        // Function to validate videos
        async function validateVideos(files) {
            const validVideos = [];
            let found1080x1920 = false;
            let found1920x1080 = false;

            for (const file of files) {
                const video = document.createElement('video');
                video.src = URL.createObjectURL(file);

                // Wait for metadata to load to get video dimensions and duration
                await new Promise((resolve) => {
                    video.onloadedmetadata = function () {
                        if (file.type === 'video/mp4' &&
                            file.size <= 200 * 1024 * 1024 &&
                            Math.floor(video.duration) <= 30) {

                            const metadata = {
                                fileName: file.name,
                                fileType: file.type,
                                fileSize: file.size,
                                duration: Math.floor(video.duration),
                                resolution: `${video.videoWidth}x${video.videoHeight}`
                            };

                            // Check if the resolution matches either 1920x1080 or 1080x1920
                            if (!found1920x1080 && isIntegerMultiple(video.videoWidth, 1920) && isIntegerMultiple(video.videoHeight, 1080)) {
                                validVideos.push({ file, metadata });
                                found1920x1080 = true;
                            } else if (!found1080x1920 && isIntegerMultiple(video.videoWidth, 1080) && isIntegerMultiple(video.videoHeight, 1920)) {
                                validVideos.push({ file, metadata });
                                found1080x1920 = true;
                            }
                        }
                        resolve();
                    };
                });
            }

            // Final validation message
            if (validVideos.length === 0) {
                document.getElementById("videoError").innerText = "Please upload at least one valid video (1920x1080 or 1080x1920 and less than 30s).";
            } else if (validVideos.length !== 1 && validVideos.length !== 2) {
                document.getElementById("videoError").innerText = "Please upload exactly one or two valid videos.";
            }

            return validVideos; // Return valid videos with metadata
        }

        // Chunked upload function
        async function uploadFileInChunks(file, metadata, mediaDtos) {
            let start = 0;
            let chunkIndex = 0;
            const totalChunks = Math.ceil(file.size / chunkSize);
            while (start < file.size) {
                const chunk = file.slice(start, start + chunkSize);
                const formData = new FormData();
                formData.append("chunk", chunk);
                formData.append("fileName", file.name);
                formData.append("chunkIndex", chunkIndex);
                formData.append("totalChunks", totalChunks);
                formData.append("fileType", file.type);
                formData.append("fileSize", file.size);
                formData.append("duration", metadata.duration);
                formData.append("resolution", metadata.resolution);

                const response = await fetch(uploadEndpoint, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });
                if (response.ok) {
                    // Parse the JSON response from the server
                    const data = await response.json();
                    if (Array.isArray(data) && data.length > 0) {
                        mediaDtos.push(data[0]);
                    }
                }
                if (!response.ok) {
                    throw new Error('Failed to upload chunk ' + chunkIndex);
                }

                start += chunkSize;
                chunkIndex++;
            }
            return mediaDtos;
        }

        // Handle submit button click
        submitBtn.addEventListener('click', async (e) => {
            e.preventDefault();

            // Clear previous error messages
            document.querySelectorAll(".error").forEach(e => e.innerText = "");

            let isValid = true;

            // Title validation
            const title = document.getElementById("title").value.trim();
            if (title.length < 5) {
                document.getElementById("titleError").innerText = "Title must be at least 5 characters.";
                isValid = false;
            }

            // Description validation
            const description = document.getElementById("description").value.trim();
            if (description.length < 10) {
                document.getElementById("descriptionError").innerText = "Description must be at least 10 characters.";
                isValid = false;
            }

            // CategoryId validation
            const categoryId = parseInt(document.getElementById("categoryDropdown").value, 10);
            if (isNaN(categoryId) || categoryId <= 0) {
                document.getElementById("categoryError").innerText = "Please select a valid category.";
                isValid = false;
            }

            // UserId validation
            const userId = document.getElementById("userId").value.trim();
            if (!userId) {
                document.getElementById("userIdError").innerText = "UserId is required.";
                isValid = false;
            }

            const files = videoInput.files;
            const validVideos = await validateVideos(files);
            let mediaDtos = [];
            // If validation fails, return
            if (validVideos.length !== 2 && validVideos.length !== 1) {
                isValid = false;
            }

            // If all validations pass, submit the form
            if (!isValid) {
                return;
            }

            try {
                for (const { file, metadata } of validVideos) {
                    // Upload file in chunks
                    await uploadFileInChunks(file, metadata, mediaDtos);
                }

                // Upload form data
                const formData = new FormData();
                formData.append("Title", document.getElementById("title").value);
                formData.append("CategoryId", document.getElementById("categoryDropdown").value);
                formData.append("Description", document.getElementById("description").value);
                formData.append("UserId", document.getElementById("userId").value);
                formData.append("MediaDtos", JSON.stringify(mediaDtos));

                const response = await fetch(createContentEndpoint, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });

                if (response.ok) {
                    videoValidationMessage.textContent = "";
                    window.location.href = "/admin/content";
                } else {
                    alert('Error creating content.');
                }
            } catch (error) {
                alert('Create content failed: ' + error.message);
            }
        });
    </script>
}
