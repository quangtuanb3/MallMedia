@page
@model MallMedia.Presentation.Pages.Client.IndexModel
@using Newtonsoft.Json
@{
    ViewData["Title"] = "Client Display";
}

<div id="monitor">
    <div id="text-content" style="display:none;"></div>
    <div id="image-content" style="display:none;">
        <img id="image-slide" src="" alt="Image Content" />
    </div>
    <div id="video-content" style="display:none;">
        <video id="video-player" controls autoplay muted></video>
    </div>
</div>



@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.9/signalr.min.js"></script>
    <script>
        function scaleContent(element, deviceWidth, deviceHeight, contentWidth, contentHeight) {
            const monitorWidth = deviceWidth;  // Full screen width
            const monitorHeight = deviceHeight;  // Full screen height

            // Calculate scale factor based on content and screen dimensions
            const scaleX = monitorWidth / contentWidth;
            const scaleY = monitorHeight / contentHeight;

            // Use the smaller scale factor to ensure content fits proportionally
            const scale = Math.min(scaleX, scaleY);

            // Apply the scaling to the content
            element.style.transform = `scale(${scale})`;
            element.style.transformOrigin = 'center center'; // Ensure scaling starts from the center
        }
        document.addEventListener("DOMContentLoaded", async function () {
            // Get the token from localStorage
            const token = localStorage.getItem("authToken");

            if (!token) {
                console.log("No auth token found in localStorage.");
                return; // Exit if token is not found
            }

            // Helper function to call APIs with Bearer token
            async function callApi(url) {
                try {
                    const response = await fetch(url, {
                        method: 'GET',
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Content-Type': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        if (response.status === 401) { // Check if the status is 401 Unauthorized
        window.location.href = '/Auth/Login'; // Redirect to the login page
    } else {
        throw new Error(`API call failed with status ${response.status}`);
    }
                    }

                    const data = await response.json();
                    return data;
                } catch (error) {
                    console.error('Error fetching data from API:', error);
                    return null;
                }
            }

            const baseUrl = "http://10.20.54.244:5056";
            // Define API endpoints
            const currentUserUrl = baseUrl + '/api/identity/currentUser';
            const currentDeviceUrl = baseUrl + '/api/identity/currentDevice';
            const currentDeviceScheduleUrl = baseUrl + '/api/Schedule/device/{deviceId}/current';

            // Call the APIs in sequence
            const currentUser = await callApi(currentUserUrl);
            const currentDevice = await callApi(currentDeviceUrl);
            var resolution = currentDevice.resolution.split("x");
            var deviceWidth = resolution[0];
            var deviceHeight = resolution[1];
            if (!currentUser || !currentDevice) {
                console.log("Error fetching current user or current device");
                return; // Exit if there's an issue fetching data
            }

            const deviceId = currentDevice.id; // Assuming currentDevice has deviceId
            const scheduleData = await callApi(currentDeviceScheduleUrl.replace("{deviceId}", deviceId));

            if (!scheduleData) {
                console.log("Error fetching schedule data");
                return; // Exit if there's an issue fetching schedule data
            }

            // Logging the results
            console.log("Current User:", currentUser);
            console.log("Current Device:", currentDevice);
            console.log("Schedule Data:", scheduleData);

            // Function to display content
            let currentIndex = 0;

            function showContent(content) {
                // Hide all content divs initially
                document.getElementById("text-content").style.display = "none";
                document.getElementById("image-content").style.display = "none";
                document.getElementById("video-content").style.display = "none";

                if (content.contentType === "Text") {
                    // Display text content in full-screen
                    const textContent = document.getElementById("text-content");
                    textContent.style.display = "flex"; // Show the text content div
                    textContent.style.color = "Black"; // Set text color
                    textContent.style.backgroundColor = "white";
                    document.getElementById("text-content").innerText = content.description;

                    setTimeout(showNextContent, 5000); // Show text for 3 seconds before moving to next content
                } else if (content.contentType === "Images") {
                    // Display image content in full-screen as a slideshow
                    const images = content.media.filter(media => media.type.toLowerCase().includes("image"));

                    let imageIndex = 0;

                    function showNextImage() {
                        if (imageIndex < images.length) {
                            const imageElement = document.getElementById("image-slide");
                            document.getElementById("image-content").style.display = "block";
                            const imagePath = baseUrl + "\\" + images[imageIndex].path; // Ensure baseUrl is correctly defined
                            imageElement.src = imagePath;

                            // Load the image and apply scaling once the image is fully loaded
                            imageElement.onload = function () {
                                //    scaleContent(imageElement, deviceWidth, deviceHeight, imageElement.naturalWidth, imageElement.naturalHeight);
                            };

                            imageIndex++;
                            setTimeout(showNextImage, 3000); // Show each image for 3 seconds before showing the next one
                        } else {
                            setTimeout(showNextContent, 3000); // Show next content after images are done
                        }
                    }

                    showNextImage();
                } else if (content.contentType === "Video") {
                    // Display video content in full-screen and handle multiple videos
                    const videos = content.media?.filter(media => media.type === "video/mp4") || [];
                    let videoIndex = 0;
                    const videoPlayer = document.getElementById("video-player");

                    // Function to play the next video, if available
                    function playNextVideo() {
                        if (videoIndex < videos.length) {
                            const videoPath = videos[videoIndex]?.path;
                            if (!videoPath) {
                                console.warn("Invalid video path. Skipping video.");
                                videoIndex++;
                                playNextVideo();
                                return;
                            }

                            videoPlayer.src = baseUrl + "\\" + videoPath;
                            videoPlayer.onloadedmetadata = function () {
                                scaleContent(videoPlayer, deviceWidth, deviceHeight, videoPlayer.videoWidth, videoPlayer.videoHeight);
                            };
                            videoPlayer.play().then(() => {
                                document.getElementById("video-content").style.display = "block";

                                videoIndex++;
                            }).catch(error => {
                                console.log("Autoplay was prevented or interrupted:", error);
                                // Show a play button or an error message if necessary
                                setTimeout(playNextVideo, 10); // Retry after a delay
                            });
                        } else {
                            videoPlayer.removeEventListener("ended", playNextVideo);
                            setTimeout(showNextContent, 10); // Show next content after all videos are done
                        }
                    }

                    // Event listener to play the next video when the current one ends
                    videoPlayer.addEventListener("ended", playNextVideo);

                    // Start playing the first video
                    playNextVideo();
                }
            }

            // Move to the next content
            function showNextContent() {
                currentIndex = (currentIndex + 1) % scheduleData.length; // Loop through contents
                showContent(scheduleData[currentIndex]);
            }

            // Start the content display if contents exist
            if (scheduleData.length > 0) {
                showContent(scheduleData[currentIndex]);
            }

            // Set the resolution of the monitor container
            resolution = currentDevice.resolution.split("x");
            let width = resolution[0];
            let height = resolution[1];
            document.getElementById("monitor").style.width = width + "px";
            document.getElementById("monitor").style.height = height + "px";
        });
            document.addEventListener("DOMContentLoaded", async function () {
            // Initialize content loading and SignalR connection here
            initializeRealTimeUpdates();
            loadContent();
        });

        async function initializeRealTimeUpdates() {
            try {
                const connection0 = new signalR.HubConnectionBuilder().withUrl("/real-time-update").build();
                connection0.on("ScheduleCreated", id => console.log("Schedule created:", id));
                connection0.on("ScheduleUpdated", id => console.log("Schedule updated:", id));
                await connection0.start();
            } catch (error) {
                console.error("Error initializing SignalR connection:", error);
            }
        }

        async function loadContent() {
            const token = localStorage.getItem("authToken");
            if (!token) return console.warn("No auth token found");

            const [user, device] = await Promise.all([
                fetchContent(`${baseUrl}/api/identity/currentUser`),
                fetchContent(`${baseUrl}/api/identity/currentDevice`)
            ]);

            if (!user || !device) return;

            const scheduleData = await fetchContent(`${baseUrl}/api/Schedule/device/${device.id}/current`);
            if (scheduleData && scheduleData.length) displayContent(scheduleData[0]);
        }
    </script>
    <script>
        const connection1 = new signalR.HubConnectionBuilder()
            .withUrl("/real-time-update")
               .build();

            connection1.on("ScheduleCreated", function(scheduleId) {
            console.log("New Schedule Created:", scheduleId);
        });

        connection1.on("ScheduleUpdated", function(scheduleId) {
            console.log("Schedule Updated:", scheduleId);
        });

        connection1.start().catch(err => console.error(err.toString()));
    </script>
        <script>
            document.addEventListener("DOMContentLoaded", async function () {
                const connection2 = new signalR.HubConnectionBuilder()
                    .withUrl("/real-time-update_hub")
                    .build();

                connection2.on("ReceiveContentUpdate", async (deviceId, contentData) => {
                    console.log("Content update received for device:", deviceId);

                    // Update content only for the current device
                    if (deviceId === "<current-device-id>") {
                        const data = JSON.parse(contentData);

                        // Call your API or display the new content based on data
                        showContent(data);
                    }
                });

                await connection2.start().catch(err => console.error(err.toString()));
            });
        </script>
    <script>
        document.addEventListener("DOMContentLoaded", async function () {
            const deviceId = "<current-device-id>";  // ID thiết bị hiện tại
            const connection2 = new signalR.HubConnectionBuilder()
                .withUrl("/real-time-update_hub")
                .build(); 

            connection2.on("ReceiveContentUpdate", async (receivedDeviceId, contentData) => {
                console.log("Content update received for device:", receivedDeviceId);

                // Chỉ cập nhật nội dung cho thiết bị hiện tại
                if (receivedDeviceId === deviceId) {
                    const data = JSON.parse(contentData);

                    // Gọi API để lấy nội dung mới (hoặc xử lý dữ liệu mới)
                    await fetch("/api/get-new-content", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({ deviceId: deviceId })
                    })
                    .then(response => response.json())
                    .then(content => {
                        showContent(content);
                    })
                    .catch(error => console.error("Error fetching new content:", error));
                }
            });

            await connection2.start().catch(err => console.error(err.toString()));
        });

        function showContent(data) {
            // Cập nhật giao diện người dùng với dữ liệu mới
            console.log("Displaying new content:", data);
            // Cập nhật giao diện tùy thuộc vào nội dung mới
        }
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", async function () {
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/real-time-update_hub")
                .build();

            connection.on("ReceiveContentUpdate", (deviceId, contentData) => {
                console.log("Content update received for device:", deviceId);
                if (deviceId === "<current-device-id>") {
                    const data = JSON.parse(contentData);
                    showContent(data); // Hàm hiển thị nội dung mới
                }
            });

            // Kiểm tra trạng thái kết nối và chỉ gọi `start` nếu chưa kết nối
            if (connection.state === signalR.HubConnectionState.Disconnected) {
                try {
                    await connection.start();
                    console.log("SignalR connection started.");
                } catch (err) {
                    console.error("Error starting SignalR connection:", err.toString());
                }
            } else {
                console.log("Connection is already in progress or connected.");
            }
        });
    </script>

}

<!--
<style>
      /* Full-screen styling for content */
      body, html {
          height: 100%;
          margin: 0;
      }

      #monitor {
          width: 100%;
          height: 100%;
          display: flex;
          justify-content: center;
          align-items: center;
          background-color: black; /* Set background color */
      }

      #text-content, #image-content, #video-content {
          text-align: center;
          max-width: 100%;
          max-height: 100%;
          display: none;
      }

      #image-slide, #video-player {
          width: 100%; /* Full-screen width */
          height: 100%; /* Full-screen height */
          object-fit: contain; /* Ensure content scales proportionally */
      }

      /* Ensure text is displayed in full screen */
      #text-content {
          color: white; /* Text color for visibility */
          font-size: 3em;
          font-weight: bold;
          padding: 20px;
          background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent background */
          border-radius: 10px;
          box-shadow: 0 0 10px rgba(0, 0, 0, 0.8);
      }
  </style>

 -->

<style>
    /* Full-screen styling for content */
    body, html {
        height: 100%;
        margin: 0;
    }

    #monitor {
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: black; /* Set background color */
        overflow: hidden; /* Ensure content does not overflow */
    }

    #text-content, #image-content, #video-content {
        text-align: center;
        max-width: 100%;
        max-height: 100%;
        display: none;
    }

    /* Image and video will scale proportionally, maintaining aspect ratio */
    #image-slide, #video-player {
        width: 100%;
        height: 100%;
        object-fit: contain; /* Ensure content scales proportionally */
    }

    /* Ensure text is displayed in full screen */
    #text-content {
        color: white;
        font-size: 3em;
        font-weight: bold;
        padding: 20px;
        background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent background */
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        min-width: 100%;
        min-height: 100%;
    }
</style>