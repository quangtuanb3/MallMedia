@page
@model MallMedia.Presentation.Pages.Client.IndexModel
@using Newtonsoft.Json
@{
    ViewData["Title"] = "Client Display";
}

<head>
    <script type="module">
        import { checkUserAuthentication } from '../js/auth.js';  // Ensure the correct path

        // Declare the currentUser globally for use in other scripts
        window.currentUser = null;

        // Using the correct event name for when the window is loaded
        window.onload = async function () {
            try {
                const user = await checkUserAuthentication('User');
                window.currentUser = user;
                console.log('Authenticated:', user);
            } catch (error) {
                console.error('Authentication error:', error);
            }
        };
    </script>
</head>

<div id="monitor">
    <div id="video-content" style="display:none;">
        <video id="video-player" controls autoplay muted></video>
    </div>
</div>

@section Scripts {
    <script>
        function scaleContent(element, deviceWidth, deviceHeight, contentWidth, contentHeight) {
            const monitorWidth = deviceWidth;  // Full screen width
            const monitorHeight = deviceHeight;  // Full screen height

            // Calculate scale factor based on content and screen dimensions
            const scaleX = monitorWidth / contentWidth;
            const scaleY = monitorHeight / contentHeight;

            // Use the smaller scale factor to ensure content fits proportionally
            const scale = Math.min(scaleX, scaleY);

            // Apply the scaling to the content
            element.style.transform = `scale(${scale})`;
            element.style.transformOrigin = 'center center'; // Ensure scaling starts from the center
        }

        document.addEventListener("DOMContentLoaded", async function () {
            // Get the token from localStorage
            const token = localStorage.getItem("authToken");

            if (!token) {
                console.log("No auth token found in localStorage.");
                return; // Exit if token is not found
            }

            // Helper function to call APIs with Bearer token
            async function callApi(url) {
                try {
                    const response = await fetch(url, {
                        method: 'GET',
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Content-Type': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        if (response.status === 401) { // Check if the status is 401 Unauthorized
                            window.location.href = '/Auth/Login'; // Redirect to the login page
                        } else {
                            throw new Error(`API call failed with status ${response.status}`);
                        }
                    }

                    const data = await response.json();
                    return data;
                } catch (error) {
                    console.error('Error fetching data from API:', error);
                    return null;
                }
            }

            // Define API endpoints
            const baseUrl = "https://localhost:7199";
            const currentUserUrl = baseUrl + '/api/identity/currentUser';
            const currentDeviceUrl = baseUrl + '/api/identity/currentDevice';
            const currentDeviceScheduleUrl = baseUrl + '/api/Schedule/device/{deviceId}/current';

            // Call the APIs in sequence
            const currentDevice = await callApi(currentDeviceUrl);
            var resolution = currentDevice.resolution.split("x");
            var deviceWidth = resolution[0];
            var deviceHeight = resolution[1];

            if (!window.currentUser || !currentDevice) {
                console.log("Error fetching current user or current device");
                return; // Exit if there's an issue fetching data 
            }

            const deviceId = currentDevice.id; // Assuming currentDevice has deviceId
            const scheduleData = await callApi(currentDeviceScheduleUrl.replace("{deviceId}", deviceId));

            if (!scheduleData) {
                console.log("Error fetching schedule data");
                return; // Exit if there's an issue fetching schedule data
            }

            // Logging the results
            console.log("Current User:", window.currentUser);
            console.log("Current Device:", currentDevice);
            console.log("Schedule Data:", scheduleData);

            // Function to display content
            let currentIndex = 0;

            function showContent(content) {
                // Hide all content divs initially
                document.getElementById("video-content").style.display = "none";

                // Display video content in full-screen and handle multiple videos
                const videos = content.media?.filter(media => media.type === "video/mp4") || [];
                let videoIndex = 0;
                const videoPlayer = document.getElementById("video-player");

                // Function to play the next video, if available
                function playNextVideo() {
                    if (videoIndex < videos.length) {
                        const videoPath = videos[videoIndex]?.path;
                        if (!videoPath) {
                            console.warn("Invalid video path. Skipping video.");
                            videoIndex++;
                            playNextVideo();
                            return;
                        }

                        videoPlayer.src = baseUrl + "\\" + videoPath;
                        videoPlayer.onloadedmetadata = function () {
                            scaleContent(videoPlayer, deviceWidth, deviceHeight, videoPlayer.videoWidth, videoPlayer.videoHeight);
                        };
                        videoPlayer.play().then(() => {
                            document.getElementById("video-content").style.display = "block";
                            videoIndex++;
                        }).catch(error => {
                            console.log("Autoplay was prevented or interrupted:", error);
                            // Show a play button or an error message if necessary
                            setTimeout(playNextVideo, 10); // Retry after a delay
                        });
                    } else {
                        videoPlayer.removeEventListener("ended", playNextVideo);
                        setTimeout(showNextContent, 10); // Show next content after all videos are done
                    }
                }

                // Event listener to play the next video when the current one ends
                videoPlayer.addEventListener("ended", playNextVideo);

                // Start playing the first video
                playNextVideo();
            }

            // Move to the next content
            function showNextContent() {
                currentIndex = (currentIndex + 1) % scheduleData.length; // Loop through contents
                showContent(scheduleData[currentIndex]);
            }

            // Start the content display if contents exist
            if (scheduleData.length > 0) {
                showContent(scheduleData[currentIndex]);
            }

            // Set the resolution of the monitor container
            resolution = currentDevice.resolution.split("x");
            let width = resolution[0];
            let height = resolution[1];
            // document.getElementById("monitor").style.width = width + "px";
            // document.getElementById("monitor").style.height = height + "px";
        });
    </script>
}

<style>
    /* Full-screen styling for content */
    body, html {
        height: 100%;
        margin: 0;
    }

    #monitor {
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: black; /* Set background color */
        overflow: hidden; /* Ensure content does not overflow */
    }

    #text-content, #image-content, #video-content {
        text-align: center;
        max-width: 100%;
        max-height: 100%;
        display: none;
    }

    /* Image and video will scale proportionally, maintaining aspect ratio */
    #image-slide, #video-player {
        width: 100%;
        height: 100%;
        object-fit: contain; /* Ensure content scales proportionally */
    }

    /* Ensure text is displayed in full screen */
    #text-content {
        color: white;
        font-size: 3em;
        font-weight: bold;
        padding: 20px;
        background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent background */
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        min-width: 100%;
        min-height: 100%;
    }
</style>
