@page
@model MallMedia.Presentation.Pages.Client.IndexModel
@using Newtonsoft.Json
@{
    ViewData["Title"] = "Client Display";
}

<div id="monitor">
    <div id="text-content" style="display:none;"></div>
    <div id="image-content" style="display:none;">
        <img id="image-slide" src="" alt="Image Content" />
    </div>
    <div id="video-content" style="display:none;">
        <video id="video-player" controls autoplay muted></video>
    </div>
</div>

@section Scripts {
    <script>
        const contents = @Html.Raw(JsonConvert.SerializeObject(Model.Contents));
        const device = @Html.Raw(JsonConvert.SerializeObject(Model.DeviceDto));
        const baseUrl = "http://10.20.54.244:5056/";
        let currentIndex = 0;

        // Function to display content
        function showContent(content) {
            // Hide all content divs initially
            document.getElementById("text-content").style.display = "none";
            document.getElementById("image-content").style.display = "none";
            document.getElementById("video-content").style.display = "none";

            if (content.ContentType === "Text") {
                // Display text content in full-screen
                document.getElementById("text-content").style.display = "block";
                document.getElementById("text-content").innerText = content.Description;

                setTimeout(showNextContent, 3000); // Show text for 3 seconds before moving to next content
            } else if (content.ContentType === "Image") {
                // Display image content in full-screen as a slideshow
                const images = content.Media.filter(media => media.Type === "Image");
                let imageIndex = 0;

                function showNextImage() {
                    if (imageIndex < images.length) {
                        document.getElementById("image-content").style.display = "block";
                        document.getElementById("image-slide").src = baseUrl + images[imageIndex].Path;
                        imageIndex++;
                        setTimeout(showNextImage, 2000); // Show each image for 2 seconds before showing next image
                    } else {
                        setTimeout(showNextContent, 3000); // Show next content after images are done
                    }
                }

                showNextImage();
            } else if (content.ContentType === "Video") {
                // Display video content in full-screen and handle multiple videos
                const videos = content.Media.filter(media => media.Type === "video/mp4");
                let videoIndex = 0;
                const videoPlayer = document.getElementById("video-player");

                // Function to play the next video, if available
                function playNextVideo() {
                    if (videoIndex < videos.length) {
                        videoPlayer.src = baseUrl + videos[videoIndex].Path;
                        videoPlayer.play().then(() => {
                            document.getElementById("video-content").style.display = "block";
                            videoIndex++;
                        }).catch(error => {
                            videoIndex--;
                            console.log("Autoplay was prevented", error);
                            // Optionally show a message or a play button
                        });
                    } else {
                        setTimeout(showNextContent, 1); // Show next content after all videos are done
                    }
                }

                // Event listener to play the next video when the current one ends
                videoPlayer.addEventListener("ended", playNextVideo);

                // Start playing the first video
                playNextVideo();
            }
        }


        // Move to the next content
        function showNextContent() {
            currentIndex = (currentIndex + 1) % contents.length; // Loop through contents
            showContent(contents[currentIndex]);
        }

        // Start the content display if contents exist
        if (contents.length > 0) {
            showContent(contents[currentIndex]);
        }

        // Set the resolution of the monitor container
        const resolution = device.Resolution.split("x");
        const width = resolution[0];
        const height = resolution[1];
        document.getElementById("monitor").style.width = width + "px";
        document.getElementById("monitor").style.height = height + "px";
    </script>
}

<style>
    /* Full-screen styling for content */
    body, html {
        height: 100%;
        margin: 0;
    }

    #monitor {
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: black; /* Set background color */
    }

    #text-content, #image-content, #video-content {
        text-align: center;
        max-width: 100%;
        max-height: 100%;
        display: none;
    }

    #image-slide, #video-player {
        width: 100%; /* Full-screen width */
        height: 100%; /* Full-screen height */
        object-fit: contain; /* Ensure content scales proportionally */
    }

    /* Ensure text is displayed in full screen */
    #text-content {
        color: white; /* Text color for visibility */
        font-size: 3em;
        font-weight: bold;
        padding: 20px;
        background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent background */
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.8);
    }
</style>